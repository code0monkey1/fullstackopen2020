{"version":3,"sources":["logo.svg","components/PhoneEntry.js","service/person.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["PhoneEntry","name","number","deleteContact","id","onClick","baseUrl","axios","delete","then","res","data","get","modifiedObject","put","newObject","post","Notification","message","error","className","App","useState","contacts","setContacts","newContact","setNewContact","filterName","setFilterName","setMessage","setError","useEffect","personService","catch","setTimeout","filter","contact","filteredContacts","toLowerCase","includes","type","placeholder","value","onChange","event","target","preventDefault","some","window","confirm","find","map","errorMessage","response","console","log","alert","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yPAAe,I,MCEA,SAASA,EAAT,GAAqD,IAAhCC,EAA+B,EAA/BA,KAAKC,EAA0B,EAA1BA,OAAOC,EAAmB,EAAnBA,cAAcC,EAAK,EAALA,GAC1D,OACI,gCACI,kCAAMH,EAAN,MAAgBC,EAAhB,OACA,wBAAQG,QAAS,kBAAIF,EAAcC,IAAnC,iC,oBCJNE,EAAO,eAoBC,EAlBJ,SAACF,GACP,OAAQG,IAAMC,OAAN,UAAgBF,EAAhB,YAA2BF,IAAMK,MAAK,SAAAC,GAAG,OAAGA,EAAIC,SAiB9C,EAdD,WAET,OAAOJ,IAAMK,IAAIN,GAASG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAYhC,EATD,SAACP,EAAGS,GACb,OAAON,IAAMO,IAAN,UAAaR,EAAb,YAAwBF,GAAKS,GAAgBJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAQ1D,EAJD,SAACI,GACV,OAAOR,IAAMS,KAAKV,EAASS,GAAWN,MAAK,SAAAC,GAAG,OAAGA,EAAIC,SCjB1C,SAASM,EAAT,GAAwC,IAAjBC,EAAgB,EAAhBA,QAAQC,EAAQ,EAARA,MAE1C,OAAGD,EAGa,qBAAKE,UAAWD,EAAM,eAAe,iBAArC,SACKD,IAKZ,yCCsJEG,MA5Jf,WAAgB,IAAD,EAEgBC,mBAAS,IAFzB,mBAENC,EAFM,KAEGC,EAFH,OAGoBF,mBAAS,CAACrB,KAAK,GAAGC,OAAO,KAH7C,mBAGNuB,EAHM,KAGKC,EAHL,OAIoBJ,mBAAS,IAJ7B,mBAINK,EAJM,KAIKC,EAJL,OAKcN,mBAAS,IALvB,mBAKNJ,EALM,KAKEW,EALF,OAMUP,oBAAS,GANnB,mBAMNH,EANM,KAMAW,EANA,KAQbC,qBAAU,WAEJC,IAECvB,MAAK,SAAAE,GAAI,OAAIa,EAAYb,QAE9B,IAIF,IA4FMR,EAAe,SAACC,GAKpB4B,EACK5B,GACJK,MAAK,SAAAE,GAAI,OAAIA,KACbsB,OAAM,SAAAd,GACLW,GAAS,GACTD,EAAW,qEAEXK,YAAW,WACRJ,GAAS,GACTD,EAAW,MACZ,QAMJL,EAAaD,EAASY,QAAO,SAAAC,GAAO,OAAIA,EAAQhC,KAAKA,OAKhDiC,EAAmBd,EAASY,QAAQ,SAAAC,GAAO,OAAIA,EAAQnC,KAAKqC,cAAcC,SAASZ,EAAWW,kBAErG,OACE,sBAAKlB,UAAU,MAAf,UACE,cAACH,EAAD,CAAcC,QAASA,EAASC,MAAOA,IACvC,uBACE,kEACqC,uBAAOqB,KAAK,OAAOC,YAAY,iBAAiBC,MAAOf,EAAYgB,SAAU,SAACC,GAAD,OAAShB,EAAcgB,EAAMC,OAAOH,aAExJ,uBACE,iCACG,uBAAOF,KAAK,OAAOC,YAAY,OAAOC,MAAOjB,EAAWxB,KAAM0C,SAAU,SAACC,GAAWlB,EAAc,2BAAKD,GAAN,IAAiBxB,KAAK2C,EAAMC,OAAOH,YACpI,uBAAOF,KAAK,OAAOC,YAAY,SAASC,MAAOjB,EAAWvB,OAAQyC,SAAU,SAACC,GAAWlB,EAAc,2BAAKD,GAAN,IAAiBvB,OAAO0C,EAAMC,OAAOH,YAC1I,wBAAQF,KAAK,SAASnC,QAnId,SAACuC,GAMjB,GAJCA,EAAME,iBAEevB,EAASwB,MAAM,SAAAX,GAAO,OAAGA,EAAQnC,OAAOwB,EAAWxB,QAIpE,GAAI+C,OAAOC,QAAQ,qFAAsF,CAEvG,IACM7C,EADSmB,EAAS2B,MAAK,SAAAd,GAAO,OAAIA,EAAQnC,OAAOwB,EAAWxB,QACjDG,GAGjB4B,EACU5B,EAAGqB,GACVhB,MAAK,SAAAC,GAGNc,EAAaD,EAAS4B,KAAK,SAAAf,GAAO,OAAIA,EAAQhC,KAAKA,EAAGqB,EAAWW,MAEjEP,EAAW,mBACXC,GAAS,GAETI,YAAW,WAEPL,EAAW,MAEb,QAEDI,OAAM,SAAAd,GACL,IAAMiC,EAAajC,EAAMkC,SAAS1C,KAAKQ,MACtCmC,QAAQC,IAAI,wBAAwBH,GACvCvB,EAAWuB,GACXtB,GAAS,GAETI,YAAW,WAEPL,EAAW,MAEb,aAQL2B,MAAM,sDAQZxB,EACQP,GACPhB,MAAK,SAAAgB,GAIJD,EAAaD,EAASkC,OAAOhC,IAC5BI,EAAW,WAAD,OAAYJ,EAAWxB,KAAvB,YACV6B,GAAS,GAETI,YAAW,WAEHL,EAAW,MAEZ,QAGTI,OAAM,SAAAd,GACP,IAAMiC,EAAajC,EAAMkC,SAAS1C,KAAKQ,MAGtCU,EAAWuB,GAGXtB,GAAS,GAEPI,YAAW,WACHL,EAAW,MAEZ,QAGVH,EAAc,CAACzB,KAAK,GAAGC,OAAO,MA2CtB,mCAEJmC,EAAiBc,KAAK,SAAAf,GAAO,OAAM,cAACpC,EAAD,aAAaG,cAAeA,GAAoCiC,GAAhBA,EAAQhC,WClJnFsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.0ae78904.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react'\n\nexport default function PhoneEntry({name,number,deleteContact,id}) {\n    return (\n        <div>\n            <p > {name } : {number} </p> \n            <button onClick={()=>deleteContact(id)}> Delete contact </button>\n        </div>\n    )\n}\n","import axios from 'axios'\n\nconst baseUrl =`/api/persons`\n\nconst del=(id)=>{\n    return  axios.delete(`${baseUrl}/${id}`).then(res =>res.data) \n}\n\nconst getAll=()=>{\n\n    return axios.get(baseUrl).then(res => res.data)\n}\n\nconst update=(id,modifiedObject)=>{\n    return axios.put(`${baseUrl}/${id}`,modifiedObject).then(res => res.data)\n      \n}\n\nconst create=(newObject)=>{\n    return axios.post(baseUrl ,newObject).then(res =>res.data)\n}\n\nexport default{\n    del,\n    getAll,\n    update,\n    create\n}","import React from 'react'\n\nexport default function Notification({message,error}) {\n\n    if(message){\n               \n        return (\n                    <div className={error?\"errorMessage\":\"correctMessage\"}>\n                        {message}\n                    </div>\n                )\n      }\n\n      return <> </>\n}\n","import logo from './logo.svg';\nimport React ,{useState,useEffect} from 'react'\nimport './App.css';\nimport PhoneEntry from './components/PhoneEntry'\nimport personService from './service/person'\nimport Notification from './components/Notification'\n\nfunction App() {\n\n  const [contacts,setContacts]=useState([])\n  const [newContact,setNewContact]=useState({name:\"\",number:\"\"})\n  const [filterName,setFilterName]=useState(\"\")\n  const [message,setMessage]=useState(\"\")\n  const [error,setError]=useState(false)\n\n  useEffect(()=>{\n\n        personService\n        .getAll()\n        .then(data => setContacts(data) )\n\n  },[])\n\n\n\n  const addContact=(event)=>{\n   \n    event.preventDefault();\n\n   const sameNameExists= contacts.some( contact=> contact.name===newContact.name)\n   \n   if(sameNameExists){\n\n        if (window.confirm('The name of the contact is already present . Do you want to modify this contact ?')) {\n          // Save it!\n          const contact =contacts.find(contact => contact.name===newContact.name)\n          const id=contact.id\n\n          //update on server \n          personService\n            .update(id,newContact)\n            .then(res =>{\n            \n              //update in hooks \n            setContacts( contacts.map( contact => contact.id===id?newContact:contact) )\n\n            setMessage(\"Contact Updated\")\n            setError(false)\n\n            setTimeout(()=>{\n            \n                setMessage(\"\")\n\n            },5000)\n            })\n            .catch(error =>{\n              const errorMessage=error.response.data.error\n               console.log(\"The error message is \",errorMessage);\n            setMessage(errorMessage)\n            setError(true)\n\n            setTimeout(()=>{\n            \n                setMessage(\"\")\n\n            },5000)\n            })\n\n        \n        \n        } else {\n          // Do nothing!\n           \n         alert(\"You chose not to update the contact , Fine !!\")\n        \n        }\n       return \n   }\n   \n   //add to server \n    \n   personService\n   .create(newContact)\n   .then(newContact =>{\n    \n    // happy path ! \n\n     setContacts( contacts.concat(newContact)) //save contact\n      setMessage(`Contact ${newContact.name} Added `)\n      setError(false)\n\n      setTimeout(()=>{\n              \n              setMessage(\"\")\n\n           },5000)\n  }\n     )\n   .catch(error =>{\n   const errorMessage=error.response.data.error\n\n\n    setMessage(errorMessage)\n\n    \n    setError(true)\n\n      setTimeout(()=>{           \n              setMessage(\"\")\n\n           },5000)\n\n   }) \n   setNewContact({name:\"\",number:\"\"})\n       \n  }\n   \n  const deleteContact =(id)=>{\n      \n     \n    // find on server , and delete\n\n    personService\n    .del(id)\n    .then(data => data)\n    .catch(error =>{\n      setError(true)\n      setMessage(\"The note that you're looking to delete ,has already been deleted \")\n\n      setTimeout(()=>{\n         setError(false)\n         setMessage(\"\")\n      },5000)\n      \n    })\n\n    // delete in ui\n    \n    setContacts( contacts.filter(contact => contact.id!==id ))\n     \n\n  }\n\n   const filteredContacts = contacts.filter( contact => contact.name.toLowerCase().includes(filterName.toLowerCase()))\n\n  return (\n    <div className=\"App\">\n      <Notification message={message} error={error} />\n      <hr/>\n        <div>    \n              Filter People based on names : <input type=\"text\" placeholder=\"name to search\" value={filterName} onChange={(event)=>setFilterName(event.target.value)}/>\n        </div>\n      <hr/>\n        <form>  \n           <input type=\"text\" placeholder=\"name\" value={newContact.name} onChange={(event)=> { setNewContact( {...newContact,name:event.target.value } ) }}/>  \n           <input type=\"text\" placeholder=\"number\" value={newContact.number} onChange={(event)=> { setNewContact( {...newContact,number:event.target.value } ) }} />  \n           <button type=\"submit\" onClick={addContact}> Add New Contact  </button>\n         </form>     \n     { filteredContacts.map( contact =>   <PhoneEntry  deleteContact={deleteContact} key={contact.id} {...contact} /> ) }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}